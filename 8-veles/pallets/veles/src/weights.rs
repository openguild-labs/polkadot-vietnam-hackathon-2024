
//! Autogenerated weights for `pallet_veles`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-07-13, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `DESKTOP-F2AGLQ1`, CPU: `AMD Ryzen 7 5825U with Radeon Graphics`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("local")`, DB CACHE: 1024

// Executed Command:
// target/release/node-template
// benchmark
// pallet
// --chain=local
// --wasm-execution=compiled
// --pallet
// pallet_veles
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/veles/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

pub trait WeightInfo {
	fn update_vote_pass_ratio() -> Weight;
	fn update_penalty_levels() -> Weight;
	fn update_beneficiary_splits() -> Weight;
	fn update_time_value() -> Weight;
	fn update_fee_value() -> Weight;
	fn register_for_trader_account() -> Weight;
	fn register_for_project_validator_account() -> Weight;
	fn register_for_project_owner_account() -> Weight;
	fn submit_carbon_footprint_report() -> Weight;
	fn cast_vote() -> Weight;
	fn propose_project() -> Weight;
	fn propose_carbon_credit_batch() -> Weight;
	fn create_sale_order() -> Weight;
	fn complete_sale_order() -> Weight;
	fn close_sale_order() -> Weight;
	fn open_account_complaint() -> Weight;
	fn open_hash_complaint() -> Weight;
	fn retire_carbon_credits() -> Weight;
	fn repay_project_owner_debts() -> Weight;
	fn update_pallet_base_time() -> Weight;
	fn update_carbon_footprint_report() -> Weight;
	fn update_project_proposal() -> Weight;
	fn update_carbon_credit_batch_proposal() -> Weight;
	fn update_carbon_credit_sale_order() -> Weight;
	fn update_complaint_for_account() -> Weight;
	fn update_complaint_for_hash() -> Weight;
	fn update_project_owner_penalty_level() -> Weight;
	fn update_validator_penalty_level() -> Weight;
	fn update_project_penalty_level() -> Weight;
}

/// Weight functions for `pallet_veles`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Veles::AuthorityAccounts` (r:1 w:0)
	/// Proof: `Veles::AuthorityAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::VotePassRatio` (r:0 w:1)
	/// Proof: `Veles::VotePassRatio` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_vote_pass_ratio() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `172`
		//  Estimated: `1657`
		// Minimum execution time: 10_650_000 picoseconds.
		Weight::from_parts(11_081_000, 0)
			.saturating_add(Weight::from_parts(0, 1657))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Veles::AuthorityAccounts` (r:1 w:0)
	/// Proof: `Veles::AuthorityAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::VotePassRatio` (r:0 w:1)
	/// Proof: `Veles::VotePassRatio` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_penalty_levels() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `172`
		//  Estimated: `1657`
		// Minimum execution time: 10_449_000 picoseconds.
		Weight::from_parts(10_981_000, 0)
			.saturating_add(Weight::from_parts(0, 1657))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Veles::AuthorityAccounts` (r:1 w:0)
	/// Proof: `Veles::AuthorityAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::BeneficiarySplits` (r:0 w:1)
	/// Proof: `Veles::BeneficiarySplits` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_beneficiary_splits() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `172`
		//  Estimated: `1657`
		// Minimum execution time: 11_471_000 picoseconds.
		Weight::from_parts(11_902_000, 0)
			.saturating_add(Weight::from_parts(0, 1657))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Veles::AuthorityAccounts` (r:1 w:0)
	/// Proof: `Veles::AuthorityAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PalletTimeValues` (r:1 w:1)
	/// Proof: `Veles::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_time_value() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `172`
		//  Estimated: `1657`
		// Minimum execution time: 11_160_000 picoseconds.
		Weight::from_parts(11_642_000, 0)
			.saturating_add(Weight::from_parts(0, 1657))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Veles::AuthorityAccounts` (r:1 w:0)
	/// Proof: `Veles::AuthorityAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PalletFeeValues` (r:1 w:1)
	/// Proof: `Veles::PalletFeeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_fee_value() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `172`
		//  Estimated: `1657`
		// Minimum execution time: 11_101_000 picoseconds.
		Weight::from_parts(11_682_000, 0)
			.saturating_add(Weight::from_parts(0, 1657))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Veles::CarbonFootprintAccounts` (r:1 w:0)
	/// Proof: `Veles::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::TraderAccounts` (r:1 w:1)
	/// Proof: `Veles::TraderAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::Validators` (r:1 w:0)
	/// Proof: `Veles::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectOwners` (r:1 w:0)
	/// Proof: `Veles::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonFootprintReports` (r:1 w:0)
	/// Proof: `Veles::CarbonFootprintReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PalletFeeValues` (r:1 w:0)
	/// Proof: `Veles::PalletFeeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn register_for_trader_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `268`
		//  Estimated: `3733`
		// Minimum execution time: 22_823_000 picoseconds.
		Weight::from_parts(23_704_000, 0)
			.saturating_add(Weight::from_parts(0, 3733))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Veles::CarbonFootprintAccounts` (r:2 w:0)
	/// Proof: `Veles::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::TraderAccounts` (r:1 w:0)
	/// Proof: `Veles::TraderAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::Validators` (r:2 w:1)
	/// Proof: `Veles::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectOwners` (r:2 w:0)
	/// Proof: `Veles::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonFootprintReports` (r:2 w:0)
	/// Proof: `Veles::CarbonFootprintReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectProposals` (r:1 w:0)
	/// Proof: `Veles::ProjectProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditBatchProposals` (r:1 w:0)
	/// Proof: `Veles::CarbonCreditBatchProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ComplaintsForAccounts` (r:1 w:0)
	/// Proof: `Veles::ComplaintsForAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ComplaintsForHashes` (r:1 w:0)
	/// Proof: `Veles::ComplaintsForHashes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PalletFeeValues` (r:1 w:0)
	/// Proof: `Veles::PalletFeeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn register_for_project_validator_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `369`
		//  Estimated: `6309`
		// Minimum execution time: 40_006_000 picoseconds.
		Weight::from_parts(41_108_000, 0)
			.saturating_add(Weight::from_parts(0, 6309))
			.saturating_add(T::DbWeight::get().reads(15))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Veles::CarbonFootprintAccounts` (r:2 w:0)
	/// Proof: `Veles::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::TraderAccounts` (r:1 w:0)
	/// Proof: `Veles::TraderAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::Validators` (r:2 w:0)
	/// Proof: `Veles::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectOwners` (r:2 w:1)
	/// Proof: `Veles::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonFootprintReports` (r:2 w:0)
	/// Proof: `Veles::CarbonFootprintReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectProposals` (r:1 w:0)
	/// Proof: `Veles::ProjectProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditBatchProposals` (r:1 w:0)
	/// Proof: `Veles::CarbonCreditBatchProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ComplaintsForAccounts` (r:1 w:0)
	/// Proof: `Veles::ComplaintsForAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ComplaintsForHashes` (r:1 w:0)
	/// Proof: `Veles::ComplaintsForHashes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PalletFeeValues` (r:1 w:0)
	/// Proof: `Veles::PalletFeeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn register_for_project_owner_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `369`
		//  Estimated: `6309`
		// Minimum execution time: 39_104_000 picoseconds.
		Weight::from_parts(40_466_000, 0)
			.saturating_add(Weight::from_parts(0, 6309))
			.saturating_add(T::DbWeight::get().reads(15))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Veles::TraderAccounts` (r:1 w:0)
	/// Proof: `Veles::TraderAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::Validators` (r:2 w:0)
	/// Proof: `Veles::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectOwners` (r:2 w:0)
	/// Proof: `Veles::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonFootprintReports` (r:2 w:1)
	/// Proof: `Veles::CarbonFootprintReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectProposals` (r:1 w:0)
	/// Proof: `Veles::ProjectProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditBatchProposals` (r:1 w:0)
	/// Proof: `Veles::CarbonCreditBatchProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ComplaintsForAccounts` (r:1 w:0)
	/// Proof: `Veles::ComplaintsForAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ComplaintsForHashes` (r:1 w:0)
	/// Proof: `Veles::ComplaintsForHashes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonFootprintAccounts` (r:1 w:0)
	/// Proof: `Veles::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PalletFeeValues` (r:1 w:0)
	/// Proof: `Veles::PalletFeeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Veles::PalletTimeValues` (r:1 w:0)
	/// Proof: `Veles::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::VotingTimeouts` (r:1 w:1)
	/// Proof: `Veles::VotingTimeouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn submit_carbon_footprint_report() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `375`
		//  Estimated: `6315`
		// Minimum execution time: 44_203_000 picoseconds.
		Weight::from_parts(45_656_000, 0)
			.saturating_add(Weight::from_parts(0, 6315))
			.saturating_add(T::DbWeight::get().reads(17))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Veles::Validators` (r:1 w:0)
	/// Proof: `Veles::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PalletFeeValues` (r:1 w:0)
	/// Proof: `Veles::PalletFeeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectOwners` (r:1 w:0)
	/// Proof: `Veles::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PenaltyLevels` (r:1 w:0)
	/// Proof: `Veles::PenaltyLevels` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Veles::ComplaintsForAccounts` (r:1 w:1)
	/// Proof: `Veles::ComplaintsForAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cast_vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `456`
		//  Estimated: `3921`
		// Minimum execution time: 27_642_000 picoseconds.
		Weight::from_parts(28_613_000, 0)
			.saturating_add(Weight::from_parts(0, 3921))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Veles::ProjectOwners` (r:2 w:0)
	/// Proof: `Veles::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectOwnerDebts` (r:1 w:0)
	/// Proof: `Veles::ProjectOwnerDebts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectProposals` (r:1 w:1)
	/// Proof: `Veles::ProjectProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonFootprintReports` (r:1 w:0)
	/// Proof: `Veles::CarbonFootprintReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditBatchProposals` (r:1 w:0)
	/// Proof: `Veles::CarbonCreditBatchProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ComplaintsForAccounts` (r:1 w:0)
	/// Proof: `Veles::ComplaintsForAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ComplaintsForHashes` (r:1 w:0)
	/// Proof: `Veles::ComplaintsForHashes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonFootprintAccounts` (r:1 w:0)
	/// Proof: `Veles::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::Validators` (r:2 w:0)
	/// Proof: `Veles::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PalletFeeValues` (r:1 w:0)
	/// Proof: `Veles::PalletFeeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PenaltyLevels` (r:1 w:0)
	/// Proof: `Veles::PenaltyLevels` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Veles::PalletTimeValues` (r:1 w:0)
	/// Proof: `Veles::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::VotingTimeouts` (r:1 w:1)
	/// Proof: `Veles::VotingTimeouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_project() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `445`
		//  Estimated: `6385`
		// Minimum execution time: 53_832_000 picoseconds.
		Weight::from_parts(55_274_000, 0)
			.saturating_add(Weight::from_parts(0, 6385))
			.saturating_add(T::DbWeight::get().reads(17))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Veles::ProjectOwners` (r:2 w:0)
	/// Proof: `Veles::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectOwnerDebts` (r:1 w:0)
	/// Proof: `Veles::ProjectOwnerDebts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::Projects` (r:1 w:0)
	/// Proof: `Veles::Projects` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonFootprintReports` (r:1 w:0)
	/// Proof: `Veles::CarbonFootprintReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectProposals` (r:1 w:0)
	/// Proof: `Veles::ProjectProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditBatchProposals` (r:1 w:1)
	/// Proof: `Veles::CarbonCreditBatchProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ComplaintsForAccounts` (r:1 w:0)
	/// Proof: `Veles::ComplaintsForAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ComplaintsForHashes` (r:1 w:0)
	/// Proof: `Veles::ComplaintsForHashes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonFootprintAccounts` (r:1 w:0)
	/// Proof: `Veles::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::Validators` (r:1 w:0)
	/// Proof: `Veles::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PalletFeeValues` (r:1 w:0)
	/// Proof: `Veles::PalletFeeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PenaltyLevels` (r:1 w:0)
	/// Proof: `Veles::PenaltyLevels` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Veles::PalletTimeValues` (r:1 w:0)
	/// Proof: `Veles::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::VotingTimeouts` (r:1 w:1)
	/// Proof: `Veles::VotingTimeouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_carbon_credit_batch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `558`
		//  Estimated: `6498`
		// Minimum execution time: 55_034_000 picoseconds.
		Weight::from_parts(57_528_000, 0)
			.saturating_add(Weight::from_parts(0, 6498))
			.saturating_add(T::DbWeight::get().reads(17))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Veles::CarbonFootprintAccounts` (r:1 w:0)
	/// Proof: `Veles::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::TraderAccounts` (r:1 w:0)
	/// Proof: `Veles::TraderAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectOwners` (r:1 w:0)
	/// Proof: `Veles::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditBatches` (r:1 w:0)
	/// Proof: `Veles::CarbonCreditBatches` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditHoldings` (r:1 w:1)
	/// Proof: `Veles::CarbonCreditHoldings` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Veles::PalletTimeValues` (r:1 w:0)
	/// Proof: `Veles::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::SaleOrderTimeouts` (r:1 w:1)
	/// Proof: `Veles::SaleOrderTimeouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditSaleOrders` (r:0 w:1)
	/// Proof: `Veles::CarbonCreditSaleOrders` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_sale_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `437`
		//  Estimated: `3902`
		// Minimum execution time: 34_695_000 picoseconds.
		Weight::from_parts(36_258_000, 0)
			.saturating_add(Weight::from_parts(0, 3902))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Veles::CarbonFootprintAccounts` (r:1 w:0)
	/// Proof: `Veles::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::TraderAccounts` (r:1 w:0)
	/// Proof: `Veles::TraderAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectOwners` (r:4 w:0)
	/// Proof: `Veles::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditSaleOrders` (r:1 w:1)
	/// Proof: `Veles::CarbonCreditSaleOrders` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditBatches` (r:1 w:0)
	/// Proof: `Veles::CarbonCreditBatches` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:5 w:5)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Veles::Projects` (r:1 w:0)
	/// Proof: `Veles::Projects` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::BeneficiarySplits` (r:1 w:0)
	/// Proof: `Veles::BeneficiarySplits` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PenaltyLevels` (r:1 w:0)
	/// Proof: `Veles::PenaltyLevels` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::Validators` (r:3 w:0)
	/// Proof: `Veles::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditHoldings` (r:2 w:2)
	/// Proof: `Veles::CarbonCreditHoldings` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::SaleOrderTimeouts` (r:1 w:1)
	/// Proof: `Veles::SaleOrderTimeouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn complete_sale_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1231`
		//  Estimated: `14005`
		// Minimum execution time: 211_708_000 picoseconds.
		Weight::from_parts(215_455_000, 0)
			.saturating_add(Weight::from_parts(0, 14005))
			.saturating_add(T::DbWeight::get().reads(22))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: `Veles::CarbonFootprintAccounts` (r:1 w:0)
	/// Proof: `Veles::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::TraderAccounts` (r:1 w:0)
	/// Proof: `Veles::TraderAccounts` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectOwners` (r:1 w:0)
	/// Proof: `Veles::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditSaleOrders` (r:1 w:1)
	/// Proof: `Veles::CarbonCreditSaleOrders` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditBatches` (r:1 w:0)
	/// Proof: `Veles::CarbonCreditBatches` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditHoldings` (r:1 w:1)
	/// Proof: `Veles::CarbonCreditHoldings` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::SaleOrderTimeouts` (r:1 w:1)
	/// Proof: `Veles::SaleOrderTimeouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn close_sale_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `623`
		//  Estimated: `4088`
		// Minimum execution time: 31_750_000 picoseconds.
		Weight::from_parts(32_471_000, 0)
			.saturating_add(Weight::from_parts(0, 4088))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Veles::Validators` (r:3 w:0)
	/// Proof: `Veles::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonFootprintReports` (r:1 w:0)
	/// Proof: `Veles::CarbonFootprintReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectProposals` (r:1 w:0)
	/// Proof: `Veles::ProjectProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditBatchProposals` (r:1 w:0)
	/// Proof: `Veles::CarbonCreditBatchProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ComplaintsForAccounts` (r:2 w:1)
	/// Proof: `Veles::ComplaintsForAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ComplaintsForHashes` (r:1 w:0)
	/// Proof: `Veles::ComplaintsForHashes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonFootprintAccounts` (r:1 w:0)
	/// Proof: `Veles::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectOwners` (r:3 w:0)
	/// Proof: `Veles::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PalletFeeValues` (r:1 w:0)
	/// Proof: `Veles::PalletFeeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PenaltyLevels` (r:1 w:0)
	/// Proof: `Veles::PenaltyLevels` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Veles::Projects` (r:2 w:0)
	/// Proof: `Veles::Projects` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditBatches` (r:2 w:1)
	/// Proof: `Veles::CarbonCreditBatches` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Veles::PalletTimeValues` (r:1 w:0)
	/// Proof: `Veles::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ComplaintTimeouts` (r:1 w:1)
	/// Proof: `Veles::ComplaintTimeouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn open_account_complaint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `862`
		//  Estimated: `9277`
		// Minimum execution time: 75_031_000 picoseconds.
		Weight::from_parts(76_824_000, 0)
			.saturating_add(Weight::from_parts(0, 9277))
			.saturating_add(T::DbWeight::get().reads(23))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Veles::Validators` (r:2 w:0)
	/// Proof: `Veles::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonFootprintReports` (r:1 w:0)
	/// Proof: `Veles::CarbonFootprintReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectProposals` (r:1 w:0)
	/// Proof: `Veles::ProjectProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditBatchProposals` (r:1 w:0)
	/// Proof: `Veles::CarbonCreditBatchProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ComplaintsForAccounts` (r:1 w:0)
	/// Proof: `Veles::ComplaintsForAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ComplaintsForHashes` (r:2 w:1)
	/// Proof: `Veles::ComplaintsForHashes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonFootprintAccounts` (r:1 w:0)
	/// Proof: `Veles::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectOwners` (r:2 w:0)
	/// Proof: `Veles::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PalletFeeValues` (r:1 w:0)
	/// Proof: `Veles::PalletFeeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Veles::Projects` (r:1 w:0)
	/// Proof: `Veles::Projects` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditBatches` (r:2 w:1)
	/// Proof: `Veles::CarbonCreditBatches` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Veles::PalletTimeValues` (r:1 w:0)
	/// Proof: `Veles::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ComplaintTimeouts` (r:1 w:1)
	/// Proof: `Veles::ComplaintTimeouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn open_hash_complaint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `862`
		//  Estimated: `6802`
		// Minimum execution time: 64_331_000 picoseconds.
		Weight::from_parts(66_214_000, 0)
			.saturating_add(Weight::from_parts(0, 6802))
			.saturating_add(T::DbWeight::get().reads(19))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Veles::CarbonFootprintAccounts` (r:1 w:1)
	/// Proof: `Veles::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditBatches` (r:1 w:0)
	/// Proof: `Veles::CarbonCreditBatches` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditHoldings` (r:1 w:1)
	/// Proof: `Veles::CarbonCreditHoldings` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Veles::CarbonCreditRetirements` (r:0 w:1)
	/// Proof: `Veles::CarbonCreditRetirements` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn retire_carbon_credits() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `505`
		//  Estimated: `3970`
		// Minimum execution time: 33_373_000 picoseconds.
		Weight::from_parts(34_074_000, 0)
			.saturating_add(Weight::from_parts(0, 3970))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Veles::ProjectOwners` (r:1 w:0)
	/// Proof: `Veles::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectOwnerDebts` (r:1 w:1)
	/// Proof: `Veles::ProjectOwnerDebts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:3 w:3)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn repay_project_owner_debts() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `546`
		//  Estimated: `8799`
		// Minimum execution time: 94_427_000 picoseconds.
		Weight::from_parts(96_862_000, 0)
			.saturating_add(Weight::from_parts(0, 8799))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Veles::PalletTimeValues` (r:1 w:1)
	/// Proof: `Veles::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_pallet_base_time() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `113`
		//  Estimated: `1598`
		// Minimum execution time: 7_855_000 picoseconds.
		Weight::from_parts(8_416_000, 0)
			.saturating_add(Weight::from_parts(0, 1598))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Veles::CarbonFootprintReports` (r:1 w:1)
	/// Proof: `Veles::CarbonFootprintReports` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::VotePassRatio` (r:1 w:0)
	/// Proof: `Veles::VotePassRatio` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Veles::CarbonFootprintAccounts` (r:1 w:1)
	/// Proof: `Veles::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_carbon_footprint_report() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `345`
		//  Estimated: `3810`
		// Minimum execution time: 23_614_000 picoseconds.
		Weight::from_parts(24_426_000, 0)
			.saturating_add(Weight::from_parts(0, 3810))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Veles::ProjectProposals` (r:1 w:1)
	/// Proof: `Veles::ProjectProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::VotePassRatio` (r:1 w:0)
	/// Proof: `Veles::VotePassRatio` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Veles::Projects` (r:0 w:1)
	/// Proof: `Veles::Projects` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_project_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `267`
		//  Estimated: `3732`
		// Minimum execution time: 17_723_000 picoseconds.
		Weight::from_parts(18_264_000, 0)
			.saturating_add(Weight::from_parts(0, 3732))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Veles::CarbonCreditBatchProposals` (r:1 w:1)
	/// Proof: `Veles::CarbonCreditBatchProposals` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::VotePassRatio` (r:1 w:0)
	/// Proof: `Veles::VotePassRatio` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Veles::Projects` (r:1 w:0)
	/// Proof: `Veles::Projects` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditBatches` (r:0 w:1)
	/// Proof: `Veles::CarbonCreditBatches` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditHoldings` (r:0 w:1)
	/// Proof: `Veles::CarbonCreditHoldings` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_carbon_credit_batch_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `461`
		//  Estimated: `3926`
		// Minimum execution time: 24_105_000 picoseconds.
		Weight::from_parts(24_526_000, 0)
			.saturating_add(Weight::from_parts(0, 3926))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Veles::CarbonCreditSaleOrders` (r:1 w:1)
	/// Proof: `Veles::CarbonCreditSaleOrders` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditHoldings` (r:1 w:1)
	/// Proof: `Veles::CarbonCreditHoldings` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_carbon_credit_sale_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `458`
		//  Estimated: `3923`
		// Minimum execution time: 18_174_000 picoseconds.
		Weight::from_parts(19_256_000, 0)
			.saturating_add(Weight::from_parts(0, 3923))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Veles::ComplaintsForAccounts` (r:1 w:1)
	/// Proof: `Veles::ComplaintsForAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::VotePassRatio` (r:1 w:0)
	/// Proof: `Veles::VotePassRatio` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PalletTimeValues` (r:1 w:0)
	/// Proof: `Veles::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectOwners` (r:1 w:1)
	/// Proof: `Veles::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PenaltyTimeoutsAccounts` (r:2 w:2)
	/// Proof: `Veles::PenaltyTimeoutsAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::Projects` (r:1 w:0)
	/// Proof: `Veles::Projects` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditBatches` (r:1 w:0)
	/// Proof: `Veles::CarbonCreditBatches` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_complaint_for_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `400`
		//  Estimated: `6340`
		// Minimum execution time: 35_857_000 picoseconds.
		Weight::from_parts(36_950_000, 0)
			.saturating_add(Weight::from_parts(0, 6340))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Veles::ComplaintsForHashes` (r:1 w:1)
	/// Proof: `Veles::ComplaintsForHashes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::VotePassRatio` (r:1 w:0)
	/// Proof: `Veles::VotePassRatio` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PalletTimeValues` (r:1 w:0)
	/// Proof: `Veles::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditBatches` (r:1 w:1)
	/// Proof: `Veles::CarbonCreditBatches` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditRetirements` (r:3 w:0)
	/// Proof: `Veles::CarbonCreditRetirements` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonFootprintAccounts` (r:2 w:2)
	/// Proof: `Veles::CarbonFootprintAccounts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::Projects` (r:1 w:0)
	/// Proof: `Veles::Projects` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::ProjectOwnerDebts` (r:1 w:1)
	/// Proof: `Veles::ProjectOwnerDebts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::CarbonCreditHoldings` (r:5 w:0)
	/// Proof: `Veles::CarbonCreditHoldings` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PenaltyTimeoutsHashes` (r:1 w:1)
	/// Proof: `Veles::PenaltyTimeoutsHashes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_complaint_for_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1506`
		//  Estimated: `14871`
		// Minimum execution time: 88_446_000 picoseconds.
		Weight::from_parts(89_879_000, 0)
			.saturating_add(Weight::from_parts(0, 14871))
			.saturating_add(T::DbWeight::get().reads(17))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `Veles::ProjectOwners` (r:1 w:1)
	/// Proof: `Veles::ProjectOwners` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PalletTimeValues` (r:1 w:0)
	/// Proof: `Veles::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_project_owner_penalty_level() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `195`
		//  Estimated: `3660`
		// Minimum execution time: 12_964_000 picoseconds.
		Weight::from_parts(13_736_000, 0)
			.saturating_add(Weight::from_parts(0, 3660))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Veles::Validators` (r:1 w:1)
	/// Proof: `Veles::Validators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PalletTimeValues` (r:1 w:0)
	/// Proof: `Veles::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_validator_penalty_level() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `195`
		//  Estimated: `3660`
		// Minimum execution time: 13_105_000 picoseconds.
		Weight::from_parts(13_546_000, 0)
			.saturating_add(Weight::from_parts(0, 3660))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Veles::Projects` (r:1 w:1)
	/// Proof: `Veles::Projects` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Veles::PalletTimeValues` (r:1 w:0)
	/// Proof: `Veles::PalletTimeValues` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_project_penalty_level() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `230`
		//  Estimated: `3695`
		// Minimum execution time: 14_548_000 picoseconds.
		Weight::from_parts(14_988_000, 0)
			.saturating_add(Weight::from_parts(0, 3695))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

impl WeightInfo for () {
	fn update_vote_pass_ratio() -> Weight {
		Weight::from_parts(11_081_000, 0)
			.saturating_add(Weight::from_parts(0, 1657))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn update_penalty_levels() -> Weight {
		Weight::from_parts(10_981_000, 0)
			.saturating_add(Weight::from_parts(0, 1657))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn update_beneficiary_splits() -> Weight {
		Weight::from_parts(11_902_000, 0)
			.saturating_add(Weight::from_parts(0, 1657))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn update_time_value() -> Weight {
		Weight::from_parts(11_642_000, 0)
			.saturating_add(Weight::from_parts(0, 1657))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn update_fee_value() -> Weight {
		Weight::from_parts(11_682_000, 0)
			.saturating_add(Weight::from_parts(0, 1657))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn register_for_trader_account() -> Weight {
		Weight::from_parts(23_704_000, 0)
			.saturating_add(Weight::from_parts(0, 3733))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn register_for_project_validator_account() -> Weight {
		Weight::from_parts(41_108_000, 0)
			.saturating_add(Weight::from_parts(0, 6309))
			.saturating_add(RocksDbWeight::get().reads(15))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn register_for_project_owner_account() -> Weight {
		Weight::from_parts(40_466_000, 0)
			.saturating_add(Weight::from_parts(0, 6309))
			.saturating_add(RocksDbWeight::get().reads(15))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn submit_carbon_footprint_report() -> Weight {
		Weight::from_parts(45_656_000, 0)
			.saturating_add(Weight::from_parts(0, 6315))
			.saturating_add(RocksDbWeight::get().reads(17))
			.saturating_add(RocksDbWeight::get().writes(2))
	}

	fn cast_vote() -> Weight {
		Weight::from_parts(28_613_000, 0)
			.saturating_add(Weight::from_parts(0, 3921))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn propose_project() -> Weight {
		Weight::from_parts(55_274_000, 0)
			.saturating_add(Weight::from_parts(0, 6385))
			.saturating_add(RocksDbWeight::get().reads(17))
			.saturating_add(RocksDbWeight::get().writes(2))
	}

	fn propose_carbon_credit_batch() -> Weight {
		Weight::from_parts(57_528_000, 0)
			.saturating_add(Weight::from_parts(0, 6498))
			.saturating_add(RocksDbWeight::get().reads(17))
			.saturating_add(RocksDbWeight::get().writes(2))
	}

	fn create_sale_order() -> Weight {
		Weight::from_parts(36_258_000, 0)
			.saturating_add(Weight::from_parts(0, 3902))
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().writes(3))
	}

	fn complete_sale_order() -> Weight {
		Weight::from_parts(215_455_000, 0)
			.saturating_add(Weight::from_parts(0, 14005))
			.saturating_add(RocksDbWeight::get().reads(22))
			.saturating_add(RocksDbWeight::get().writes(9))
	}

	fn close_sale_order() -> Weight {
		Weight::from_parts(32_471_000, 0)
			.saturating_add(Weight::from_parts(0, 4088))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(3))
	}

	fn open_account_complaint() -> Weight {
		Weight::from_parts(76_824_000, 0)
			.saturating_add(Weight::from_parts(0, 9277))
			.saturating_add(RocksDbWeight::get().reads(23))
			.saturating_add(RocksDbWeight::get().writes(3))
	}

	fn open_hash_complaint() -> Weight {
		Weight::from_parts(66_214_000, 0)
			.saturating_add(Weight::from_parts(0, 6802))
			.saturating_add(RocksDbWeight::get().reads(19))
			.saturating_add(RocksDbWeight::get().writes(3))
	}

	fn retire_carbon_credits() -> Weight {
		Weight::from_parts(34_074_000, 0)
			.saturating_add(Weight::from_parts(0, 3970))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(3))
	}

	fn repay_project_owner_debts() -> Weight {
		Weight::from_parts(96_862_000, 0)
			.saturating_add(Weight::from_parts(0, 8799))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(4))
	}

	fn update_pallet_base_time() -> Weight {
		Weight::from_parts(8_416_000, 0)
			.saturating_add(Weight::from_parts(0, 1598))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn update_carbon_footprint_report() -> Weight {
		Weight::from_parts(24_426_000, 0)
			.saturating_add(Weight::from_parts(0, 3810))
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(2))
	}

	fn update_project_proposal() -> Weight {
		Weight::from_parts(18_264_000, 0)
			.saturating_add(Weight::from_parts(0, 3732))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}

	fn update_carbon_credit_batch_proposal() -> Weight {
		Weight::from_parts(24_526_000, 0)
			.saturating_add(Weight::from_parts(0, 3926))
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(3))
	}

	fn update_carbon_credit_sale_order() -> Weight {
		Weight::from_parts(19_256_000, 0)
			.saturating_add(Weight::from_parts(0, 3923))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}

	fn update_complaint_for_account() -> Weight {
		Weight::from_parts(36_950_000, 0)
			.saturating_add(Weight::from_parts(0, 6340))
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(4))
	}

	fn update_complaint_for_hash() -> Weight {
		Weight::from_parts(89_879_000, 0)
			.saturating_add(Weight::from_parts(0, 14871))
			.saturating_add(RocksDbWeight::get().reads(17))
			.saturating_add(RocksDbWeight::get().writes(6))
	}

	fn update_project_owner_penalty_level() -> Weight {
		Weight::from_parts(13_736_000, 0)
			.saturating_add(Weight::from_parts(0, 3660))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn update_validator_penalty_level() -> Weight {
		Weight::from_parts(13_546_000, 0)
			.saturating_add(Weight::from_parts(0, 3660))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}

	fn update_project_penalty_level() -> Weight {
		Weight::from_parts(14_988_000, 0)
			.saturating_add(Weight::from_parts(0, 3695))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}